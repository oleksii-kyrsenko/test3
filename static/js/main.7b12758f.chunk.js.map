{"version":3,"sources":["pages/authentication/enums/validationEnum.ts","pages/authentication/styles.ts","pages/authentication/validationSchemas/authorizationValidationSchema.ts","components/FormHelperMessage/styles.ts","components/FormHelperMessage/index.tsx","pages/authentication/AuthorizationPage/index.tsx","pages/authentication/validationSchemas/registrationValidationSchema.ts","pages/authentication/RegistrationPage/index.tsx","routing/index.tsx","App.tsx","store/reducers.ts","store/sagas.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["AuthValidationEnum","useStyles","makeStyles","theme","createStyles","root","transform","position","top","left","padding","spacing","paper","display","flexDirection","alignItems","marginBlock","form","width","marginTop","wrapper","marginBottom","submit","buttonProgress","color","red","marginLeft","linkProgress","cursor","grey","textFieldWrapper","paddingTop","paddingBottom","authorizationValidationSchema","yup","shape","email","trim","required","RequiredEmail","NotValidEmail","password","RequiredPassword","FormHelperMessage","message","disabled","error","filled","focused","variant","classes","FormHelperText","className","AuthorizationPage","React","useState","loading","setLoading","useForm","validationSchema","register","errors","handleSubmit","useEffect","setTimeout","console","log","Container","component","maxWidth","CssBaseline","Typography","noValidate","onSubmit","data","Grid","container","item","xs","TextField","margin","fullWidth","id","label","name","autoComplete","autoFocus","inputRef","type","Button","CircularProgress","size","justify","Link","href","NavLink","to","registrationValidationSchema","RequiredName","min","NotValidPassword","RegistrationPage","Routes","exact","path","App","rootReducer","combineReducers","rootSaga","all","saga","createSagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","run","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0LAAYA,E,gMCGCC,EAAYC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACXC,KAAM,CACJC,UAAW,wBACXC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,QAASP,EAAMQ,QAAQ,IAEzBC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,YAAa,QAEfC,KAAM,CACJC,MAAO,OACPC,UAAWhB,EAAMQ,QAAQ,IAE3BS,QAAS,CACPb,SAAU,WACVY,UAAWhB,EAAMQ,QAAQ,GACzBU,aAAclB,EAAMQ,QAAQ,IAE9BW,OAAQ,CACNZ,QAASP,EAAMQ,QAAQ,IAEzBY,eAAgB,CACdC,MAAOC,IAAI,KACXlB,SAAU,WACVC,IAAK,MACLC,KAAM,MACNU,WAAY,GACZO,YAAa,IAEfC,aAAc,CACZC,OAAQ,UACRJ,MAAOK,IAAK,MAEdC,iBAAkB,CAChBvB,SAAU,WACVwB,WAAY,eACZC,cAAe,qB,kBD7CThC,K,kMAAAA,E,mGAAAA,E,0IAAAA,E,uOAAAA,E,mMAAAA,M,KEIL,IAAMiC,EAAkDC,MAE5DC,MAAqB,CACpBC,MAAOF,MAEJG,OACAC,SAAStC,EAAmBuC,eAC5BH,MAAMpC,EAAmBwC,eAC5BC,SAAUP,MAAaG,OAAOC,SAAStC,EAAmB0C,oB,SCVjDzC,EAAYC,aAAW,SAACC,GAAD,OAClCC,YAAa,CACXC,KAAM,CACJE,SAAU,WACVC,IAAK,OACLE,QAASP,EAAMQ,QAAQ,EAAG,GAC1BQ,UAAW,gBCKJwB,EAAiD,SAAC,GAOjB,IAN5CC,EAM2C,EAN3CA,QAM2C,IAL3CC,gBAK2C,aAJ3CC,aAI2C,aAH3CC,cAG2C,aAF3CC,eAE2C,aAD3CC,eAC2C,MADjC,WACiC,EACrCC,EAAUjD,IAEhB,OACE,kBAACkD,EAAA,EAAD,CACEC,UAAWF,EAAQ7C,KACnBwC,SAAUA,EACVC,MAAOA,EACPC,OAAQA,EACRC,QAASA,EACTC,QAASA,GACRL,ICbMS,EAAwB,WACnC,IAAMH,EAAUjD,IADyB,EAEXqD,IAAMC,UAAkB,GAFb,mBAElCC,EAFkC,KAEzBC,EAFyB,OAIEC,YAAuB,CAChEC,iBAAkB1B,IADZ2B,EAJiC,EAIjCA,SAAUC,EAJuB,EAIvBA,OAAQC,EAJe,EAIfA,aAI1BC,qBAAU,WACHP,IACHC,GAAW,GACXO,YAAW,WACTP,GAAW,KACV,MAELQ,QAAQC,IAAIL,KAEX,CAACA,IAMJ,OACE,kBAACM,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKjB,UAAWF,EAAQ7C,MAC3D,kBAACiE,EAAA,EAAD,MACA,yBAAKlB,UAAWF,EAAQtC,OACtB,kBAAC2D,EAAA,EAAD,CAAYH,UAAU,KAAKnB,QAAQ,MAAnC,sEAGA,0BACEG,UAAWF,EAAQjC,KACnBuD,YAAU,EACVC,SAAUX,GAdD,SAACY,GAChBT,QAAQC,IAAIQ,OAcN,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACjE,QAAS,GACvB,kBAACgE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI1B,UAAWF,EAAQpB,kBACpC,kBAACiD,EAAA,EAAD,CACElC,SAAUW,EACVP,QAAQ,SACR+B,OAAO,SACP1C,UAAQ,EACR2C,WAAS,EACTC,GAAG,QACHC,MAAM,8FACNC,KAAK,QACLC,aAAa,QACbC,WAAS,EACTC,SAAU3B,EACVd,QAASe,EAAOzB,QAEjByB,EAAOzB,OACN,kBAAC,EAAD,CACEU,OAAO,EACPF,QAASiB,EAAOzB,MAAMQ,WAI5B,kBAAC+B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI1B,UAAWF,EAAQpB,kBACpC,kBAACiD,EAAA,EAAD,CACElC,SAAUW,EACVP,QAAQ,SACR+B,OAAO,SACP1C,UAAQ,EACR2C,WAAS,EACTG,KAAK,WACLD,MAAM,uCACNK,KAAK,WACLN,GAAG,WACHG,aAAa,mBACbE,SAAU3B,EACVd,QAASe,EAAOpB,WAEjBoB,EAAOpB,UACN,kBAAC,EAAD,CACEK,OAAO,EACPF,QAASiB,EAAOpB,SAASG,YAKjC,yBAAKQ,UAAWF,EAAQ9B,SACtB,kBAACqE,EAAA,EAAD,CACErC,UAAWF,EAAQ5B,OACnBkE,KAAK,SACLP,WAAS,EACThC,QAAQ,WACRJ,SAAUW,GACV,kBAACe,EAAA,EAAD,CAAYtB,QAAQ,SAASpC,QAAQ,SAArC,yFAID2C,GACC,kBAACkC,EAAA,EAAD,CAAkBC,KAAM,GAAIvC,UAAWF,EAAQ3B,kBAGnD,kBAACoD,EAAA,EAAD,CAAMC,WAAS,EAACgB,QAAQ,YACtB,kBAACjB,EAAA,EAAD,CAAME,MAAI,GACPrB,EACC,kBAACe,EAAA,EAAD,CACEtB,QAAQ,QACRpC,QAAQ,QACRuC,UAAWF,EAAQvB,cAHrB,6OAOA,kBAACkE,EAAA,EAAD,CACEC,KAAK,IACL7C,QAAQ,QACRmB,UAAW2B,IACXC,GAAG,iBAJL,mPCvHHC,EAAiD/D,MAE3DC,MAAqB,CACpBiD,KAAMlD,MAAaG,OAAOC,SAAStC,EAAmBkG,cACtD9D,MAAOF,MAEJG,OACAC,SAAStC,EAAmBuC,eAC5BH,MAAMpC,EAAmBwC,eAC5BC,SAAUP,MAEPG,OACAC,SAAStC,EAAmB0C,kBAC5ByD,IAAI,EAAGnG,EAAmBoG,oBCCpBC,EAAuB,WAClC,IAAMnD,EAAUjD,IADwB,EAEVqD,IAAMC,UAAkB,GAFd,mBAEjCC,EAFiC,KAExBC,EAFwB,OAIGC,YAAuB,CAChEC,iBAAkBsC,IADZrC,EAJgC,EAIhCA,SAAUC,EAJsB,EAItBA,OAAQC,EAJc,EAIdA,aAI1BC,qBAAU,WACHP,IACHC,GAAW,GACXO,YAAW,WACTP,GAAW,KACV,MAELQ,QAAQC,IAAIL,KAEX,CAACA,IAMJ,OACE,kBAACM,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAAKjB,UAAWF,EAAQ7C,MAC3D,kBAACiE,EAAA,EAAD,MACA,yBAAKlB,UAAWF,EAAQtC,OACtB,kBAAC2D,EAAA,EAAD,CAAYH,UAAU,KAAKnB,QAAQ,MAAnC,gEAGA,0BACEG,UAAWF,EAAQjC,KACnBuD,YAAU,EACVC,SAAUX,GAdD,SAACY,GAChBT,QAAQC,IAAIQ,OAcN,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACjE,QAAS,GACvB,kBAACgE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI1B,UAAWF,EAAQpB,kBACpC,kBAACiD,EAAA,EAAD,CACElC,SAAUW,EACVP,QAAQ,SACR+B,OAAO,SACP1C,UAAQ,EACR2C,WAAS,EACTC,GAAG,OACHC,MAAM,kFACNC,KAAK,OACLC,aAAa,OACbC,WAAS,EACTC,SAAU3B,EACVd,QAASe,EAAOuB,OAEjBvB,EAAOuB,MACN,kBAAC,EAAD,CACEtC,OAAO,EACPF,QAASiB,EAAOuB,KAAKxC,WAI3B,kBAAC+B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI1B,UAAWF,EAAQpB,kBACpC,kBAACiD,EAAA,EAAD,CACElC,SAAUW,EACVP,QAAQ,SACR+B,OAAO,SACP1C,UAAQ,EACR2C,WAAS,EACTC,GAAG,QACHC,MAAM,8FACNC,KAAK,QACLC,aAAa,QACbC,WAAS,EACTC,SAAU3B,EACVd,QAASe,EAAOzB,QAEjByB,EAAOzB,OACN,kBAAC,EAAD,CACEU,OAAO,EACPF,QAASiB,EAAOzB,MAAMQ,WAI5B,kBAAC+B,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAI1B,UAAWF,EAAQpB,kBACpC,kBAACiD,EAAA,EAAD,CACElC,SAAUW,EACVP,QAAQ,SACR+B,OAAO,SACP1C,UAAQ,EACR2C,WAAS,EACTG,KAAK,WACLD,MAAM,uCACNK,KAAK,WACLN,GAAG,WACHG,aAAa,mBACbE,SAAU3B,EACVd,QAASe,EAAOpB,WAEjBoB,EAAOpB,UACN,kBAAC,EAAD,CACEK,OAAO,EACPF,QAASiB,EAAOpB,SAASG,YAKjC,yBAAKQ,UAAWF,EAAQ9B,SACtB,kBAACqE,EAAA,EAAD,CACErC,UAAWF,EAAQ5B,OACnBkE,KAAK,SACLP,WAAS,EACThC,QAAQ,WACRJ,SAAUW,GACV,kBAACe,EAAA,EAAD,CAAYtB,QAAQ,SAASpC,QAAQ,SAArC,+FAID2C,GACC,kBAACkC,EAAA,EAAD,CAAkBC,KAAM,GAAIvC,UAAWF,EAAQ3B,kBAGnD,kBAACoD,EAAA,EAAD,CAAMC,WAAS,EAACgB,QAAQ,YACtB,kBAACjB,EAAA,EAAD,CAAME,MAAI,GACPrB,EACC,kBAACe,EAAA,EAAD,CACEtB,QAAQ,QACRpC,QAAQ,QACRuC,UAAWF,EAAQvB,cAHrB,8MAOA,kBAACkE,EAAA,EAAD,CACEC,KAAK,IACL7C,QAAQ,QACRmB,UAAW2B,IACXC,GAAG,kBAJL,oNC7IHM,EAAa,WACxB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUD,OAAK,EAACP,GAAG,oBAErB,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,iBAAiBpC,UAAWf,IAC9C,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,gBAAgBpC,UAAWiC,MCPtCI,EAAU,WACrB,OACE,oCACE,kBAAC,IAAD,CAAOrC,UAAWkC,M,gBCLXI,EAAcC,YAAgB,I,oCCC1BC,GAAV,SAAUA,IAAV,iEACL,OADK,SACCC,YAAI,IADL,uCCSP,IAAMC,EAAOC,cAEPC,EAAmBC,OAAOC,sCAAwCC,IAClEC,EAAQC,YAAYX,EAAaM,EAAiBM,YAAgBR,KAExEA,EAAKS,IAAIX,GAEMQ,QCNKI,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUV,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINW,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACzF,GACNmB,QAAQnB,MAAMA,EAAMF,c","file":"static/js/main.7b12758f.chunk.js","sourcesContent":["export enum AuthValidationEnum {\r\n  RequiredEmail = 'Введіть адресу електронної пошти',\r\n  RequiredPassword = 'Введіть пароль',\r\n  RequiredName = 'Введіть назву компанії',\r\n  NotValidEmail = 'Введіть дійсну адресу електронної пошти',\r\n  NotValidPassword = 'Пароль має бути мінімум 5 символів',\r\n}\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { red, grey } from '@material-ui/core/colors';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      transform: 'translate(-50%, -50%)',\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      padding: theme.spacing(1),\r\n    },\r\n    paper: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      marginBlock: 'auto',\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    wrapper: {\r\n      position: 'relative',\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      padding: theme.spacing(1),\r\n    },\r\n    buttonProgress: {\r\n      color: red[500],\r\n      position: 'absolute',\r\n      top: '50%',\r\n      left: '50%',\r\n      marginTop: -12,\r\n      marginLeft: -12,\r\n    },\r\n    linkProgress: {\r\n      cursor: 'default',\r\n      color: grey[500],\r\n    },\r\n    textFieldWrapper: {\r\n      position: 'relative',\r\n      paddingTop: '0 !important',\r\n      paddingBottom: '0 !important',\r\n    },\r\n  })\r\n);\r\n","import * as yup from 'yup';\r\nimport { IAuthFormData } from '../interfaces/authFormData';\r\nimport { AuthValidationEnum } from '../enums/validationEnum';\r\n\r\nexport const authorizationValidationSchema: yup.ObjectSchema = yup\r\n  .object()\r\n  .shape<IAuthFormData>({\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .required(AuthValidationEnum.RequiredEmail)\r\n      .email(AuthValidationEnum.NotValidEmail),\r\n    password: yup.string().trim().required(AuthValidationEnum.RequiredPassword),\r\n  });\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      position: 'absolute',\r\n      top: '100%',\r\n      padding: theme.spacing(0, 1),\r\n      marginTop: '-0.5rem',\r\n    },\r\n  })\r\n);\r\n","import React, { FC, ReactElement } from 'react';\r\nimport { FormHelperText } from '@material-ui/core';\r\nimport { useStyles } from './styles';\r\n\r\ntype TFormHelperMessageProps = {\r\n  message: string;\r\n  disabled?: boolean;\r\n  error?: boolean;\r\n  filled?: boolean;\r\n  focused?: boolean;\r\n  variant?: 'standard' | 'outlined' | 'filled';\r\n};\r\n\r\nexport const FormHelperMessage: FC<TFormHelperMessageProps> = ({\r\n  message,\r\n  disabled = false,\r\n  error = false,\r\n  filled = false,\r\n  focused = false,\r\n  variant = 'standard',\r\n}: TFormHelperMessageProps): ReactElement => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <FormHelperText\r\n      className={classes.root}\r\n      disabled={disabled}\r\n      error={error}\r\n      filled={filled}\r\n      focused={focused}\r\n      variant={variant}>\r\n      {message}\r\n    </FormHelperText>\r\n  );\r\n};\r\n","import React, { FC, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {\r\n  TextField,\r\n  Container,\r\n  CssBaseline,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  CircularProgress,\r\n} from '@material-ui/core';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useStyles } from '../styles';\r\nimport { IAuthFormData } from '../interfaces/authFormData';\r\nimport { authorizationValidationSchema } from '../validationSchemas/authorizationValidationSchema';\r\nimport { FormHelperMessage } from '../../../components/FormHelperMessage';\r\n\r\nexport const AuthorizationPage: FC = () => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n\r\n  const { register, errors, handleSubmit } = useForm<IAuthFormData>({\r\n    validationSchema: authorizationValidationSchema,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setLoading(true);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n      }, 2000);\r\n    }\r\n    console.log(errors);\r\n    // eslint-disable-next-line\r\n  }, [errors]);\r\n\r\n  const onSubmit = (data: IAuthFormData): void => {\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <Container component='main' maxWidth='xs' className={classes.root}>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component='h1' variant='h4'>\r\n          Авторизація\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          noValidate\r\n          onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} className={classes.textFieldWrapper}>\r\n              <TextField\r\n                disabled={loading}\r\n                variant='filled'\r\n                margin='normal'\r\n                required\r\n                fullWidth\r\n                id='email'\r\n                label='Електронна пошта'\r\n                name='email'\r\n                autoComplete='email'\r\n                autoFocus\r\n                inputRef={register}\r\n                error={!!errors.email}\r\n              />\r\n              {errors.email && (\r\n                <FormHelperMessage\r\n                  error={true}\r\n                  message={errors.email.message as string}\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.textFieldWrapper}>\r\n              <TextField\r\n                disabled={loading}\r\n                variant='filled'\r\n                margin='normal'\r\n                required\r\n                fullWidth\r\n                name='password'\r\n                label='Пароль'\r\n                type='password'\r\n                id='password'\r\n                autoComplete='current-password'\r\n                inputRef={register}\r\n                error={!!errors.password}\r\n              />\r\n              {errors.password && (\r\n                <FormHelperMessage\r\n                  error={true}\r\n                  message={errors.password.message as string}\r\n                />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <div className={classes.wrapper}>\r\n            <Button\r\n              className={classes.submit}\r\n              type='submit'\r\n              fullWidth\r\n              variant='outlined'\r\n              disabled={loading}>\r\n              <Typography variant='button' display='block'>\r\n                Авторизуватися\r\n              </Typography>\r\n            </Button>\r\n            {loading && (\r\n              <CircularProgress size={24} className={classes.buttonProgress} />\r\n            )}\r\n          </div>\r\n          <Grid container justify='flex-end'>\r\n            <Grid item>\r\n              {loading ? (\r\n                <Typography\r\n                  variant='body2'\r\n                  display='block'\r\n                  className={classes.linkProgress}>\r\n                  Не маєте облікового запису? Зареєструватися\r\n                </Typography>\r\n              ) : (\r\n                <Link\r\n                  href='#'\r\n                  variant='body2'\r\n                  component={NavLink}\r\n                  to='/registration'>\r\n                  Не маєте облікового запису? Зареєструватися\r\n                </Link>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n","import * as yup from 'yup';\r\nimport { IAuthFormData } from '../interfaces/authFormData';\r\nimport { AuthValidationEnum } from '../enums/validationEnum';\r\n\r\nexport const registrationValidationSchema: yup.ObjectSchema = yup\r\n  .object()\r\n  .shape<IAuthFormData>({\r\n    name: yup.string().trim().required(AuthValidationEnum.RequiredName),\r\n    email: yup\r\n      .string()\r\n      .trim()\r\n      .required(AuthValidationEnum.RequiredEmail)\r\n      .email(AuthValidationEnum.NotValidEmail),\r\n    password: yup\r\n      .string()\r\n      .trim()\r\n      .required(AuthValidationEnum.RequiredPassword)\r\n      .min(5, AuthValidationEnum.NotValidPassword),\r\n  });\r\n","import React, { FC, useEffect } from 'react';\r\nimport {\r\n  TextField,\r\n  Container,\r\n  CssBaseline,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Link,\r\n  CircularProgress,\r\n} from '@material-ui/core';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useStyles } from '../styles';\r\nimport { IAuthFormData } from '../interfaces/authFormData';\r\nimport { registrationValidationSchema } from '../validationSchemas/registrationValidationSchema';\r\nimport { FormHelperMessage } from '../../../components/FormHelperMessage';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport const RegistrationPage: FC = () => {\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n\r\n  const { register, errors, handleSubmit } = useForm<IAuthFormData>({\r\n    validationSchema: registrationValidationSchema,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setLoading(true);\r\n      setTimeout(() => {\r\n        setLoading(false);\r\n      }, 2000);\r\n    }\r\n    console.log(errors);\r\n    // eslint-disable-next-line\r\n  }, [errors]);\r\n\r\n  const onSubmit = (data: IAuthFormData): void => {\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <Container component='main' maxWidth='xs' className={classes.root}>\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Typography component='h1' variant='h4'>\r\n          Реєстрація\r\n        </Typography>\r\n        <form\r\n          className={classes.form}\r\n          noValidate\r\n          onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} className={classes.textFieldWrapper}>\r\n              <TextField\r\n                disabled={loading}\r\n                variant='filled'\r\n                margin='normal'\r\n                required\r\n                fullWidth\r\n                id='name'\r\n                label='Назва компанії'\r\n                name='name'\r\n                autoComplete='name'\r\n                autoFocus\r\n                inputRef={register}\r\n                error={!!errors.name}\r\n              />\r\n              {errors.name && (\r\n                <FormHelperMessage\r\n                  error={true}\r\n                  message={errors.name.message as string}\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.textFieldWrapper}>\r\n              <TextField\r\n                disabled={loading}\r\n                variant='filled'\r\n                margin='normal'\r\n                required\r\n                fullWidth\r\n                id='email'\r\n                label='Електронна пошта'\r\n                name='email'\r\n                autoComplete='email'\r\n                autoFocus\r\n                inputRef={register}\r\n                error={!!errors.email}\r\n              />\r\n              {errors.email && (\r\n                <FormHelperMessage\r\n                  error={true}\r\n                  message={errors.email.message as string}\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12} className={classes.textFieldWrapper}>\r\n              <TextField\r\n                disabled={loading}\r\n                variant='filled'\r\n                margin='normal'\r\n                required\r\n                fullWidth\r\n                name='password'\r\n                label='Пароль'\r\n                type='password'\r\n                id='password'\r\n                autoComplete='current-password'\r\n                inputRef={register}\r\n                error={!!errors.password}\r\n              />\r\n              {errors.password && (\r\n                <FormHelperMessage\r\n                  error={true}\r\n                  message={errors.password.message as string}\r\n                />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <div className={classes.wrapper}>\r\n            <Button\r\n              className={classes.submit}\r\n              type='submit'\r\n              fullWidth\r\n              variant='outlined'\r\n              disabled={loading}>\r\n              <Typography variant='button' display='block'>\r\n                Зареєструватися\r\n              </Typography>\r\n            </Button>\r\n            {loading && (\r\n              <CircularProgress size={24} className={classes.buttonProgress} />\r\n            )}\r\n          </div>\r\n          <Grid container justify='flex-end'>\r\n            <Grid item>\r\n              {loading ? (\r\n                <Typography\r\n                  variant='body2'\r\n                  display='block'\r\n                  className={classes.linkProgress}>\r\n                  Маєте обліковий запис? Авторизуватися\r\n                </Typography>\r\n              ) : (\r\n                <Link\r\n                  href='#'\r\n                  variant='body2'\r\n                  component={NavLink}\r\n                  to='/authorization'>\r\n                  Маєте обліковий запис? Авторизуватися\r\n                </Link>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { AuthorizationPage, RegistrationPage } from '../pages';\r\n\r\nexport const Routes: FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path='/'>\r\n        <Redirect exact to='/authorization' />\r\n      </Route>\r\n      <Route exact path='/authorization' component={AuthorizationPage} />\r\n      <Route exact path='/registration' component={RegistrationPage} />\r\n    </Switch>\r\n  );\r\n};\r\n","import React, { FC } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { Routes } from './routing';\r\n\r\nexport const App: FC = () => {\r\n  return (\r\n    <>\r\n      <Route component={Routes} />\r\n    </>\r\n  );\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nexport const rootReducer = combineReducers({});\r\n","import { all } from 'redux-saga/effects';\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport function* rootSaga() {\r\n  yield all([]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootReducer } from './reducers';\r\nimport { rootSaga } from './sagas';\r\n\r\ndeclare global {\r\n  // tslint:disable-next-line: interface-name\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(saga)));\r\n\r\nsaga.run(rootSaga);\r\n\r\nexport default store;\r\n","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './css/reset.css';\r\nimport './css/index.css';\r\nimport { App } from './App';\r\nimport store from './store/index';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}